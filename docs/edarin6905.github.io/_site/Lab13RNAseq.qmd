---
title: "Lab 13 RNA seq"
author: "Emily Darin"
format: pdf
---

```{r}


library(BiocManager)
library(DESeq2)
```

```{r}
# Complete the missing code
counts <- read.csv("airway_scaledcounts.csv", row.names=1)
metadata <- read.csv("airway_metadata.csv")
```

```{r}
nrow(counts)
```

>Q1.How many genes are in this dataset?

38,694

>Q2.How many ‘control’ cell lines do we have?

1 control cell line 3 replicates  

```{r}
library(dplyr)
control <- metadata %>% filter(dex=="control")
control.counts <- counts %>% select(control$id) 
control.mean <- rowSums(control.counts)/4
```

>Q3. How would you make the above code in either approach more robust? Is there a function that could help here? 


>Q4. Follow the same procedure for the treated samples (i.e. calculate the mean per gene across drug treated samples and assign to a labeled vector called treated.mean)


```{r}
library(dplyr)
treatment <- metadata %>% filter(dex=="treated")
treatment.counts <- counts %>% select(treatment$id) 
treated.mean <- rowSums(treatment.counts)/4
```
```{r}
meancounts <- data.frame(control.mean, treated.mean)
```


>Q5 (a). Create a scatter plot showing the mean of the treated samples against the mean of the control samples. Your plot should look something like the following.

```{r}
library(ggplot2)
ggplot(data=meancounts, aes(x=control.mean, y=treated.mean))+
  geom_point()+
  ylab("Treatment Mean")+
  xlab("Control Mean")+
  theme_classic()

```
>Q6. Try plotting both axes on a log scale. What is the argument to plot() that allows you to do this?

```{r}
 
ggplot(data=meancounts, aes(x=control.mean, y=treated.mean))+
geom_point()+
  ylab("Log10(Treatment Mean)")+
  xlab("Log10(Control Mean)")+
  scale_x_continuous(trans="log2")+
  scale_y_continuous(trans="log2")+
  theme_classic()
```

```{r}
meancounts$log2fc <- log2(meancounts[,"treated.mean"]/meancounts[,"control.mean"])
```

```{r}
zero.vals <- which(meancounts[,1:2]==0, arr.ind=TRUE)

to.rm <- unique(zero.vals[,1])
mycounts <- meancounts[-to.rm,]
```

>Q7. What is the purpose of the arr.ind argument in the which() function call above? Why would we then take the first column of the output and need to call the unique() function?

It arranged the indexes to exclude 0's or infinites 

```{r}
sum(mycounts$log2fc >= +2)
sum(mycounts$log2fc >= -2)
```

>Q8. Using the up.ind vector above can you determine how many up regulated genes we have at the greater than 2 fc level? 

314

>Q9. Using the down.ind vector above can you determine how many down regulated genes we have at the greater than 2 fc level?

21450


>Q10. Do you trust these results? Why or why not?

No, these numbers are based on one metric and are not including variation or significance. 

```{r}
library(DESeq2)
```

```{r}
dds <- DESeqDataSetFromMatrix(countData=counts, 
                              colData=metadata, 
                              design=~dex)
dds
```

```{r}
vsd <- vst(dds, blind = FALSE)
plotPCA(vsd, intgroup = c("dex"))
```

```{r}
pcaData <- plotPCA(vsd, intgroup=c("dex"), returnData=TRUE)
```

```{r}
percentVar <- round(100 * attr(pcaData, "percentVar"))
ggplot(pcaData) +
  aes(x = PC1, y = PC2, color = dex) +
  geom_point(size =3) +
  xlab(paste0("PC1: ", percentVar[1], "% variance")) +
  ylab(paste0("PC2: ", percentVar[2], "% variance")) +
  coord_fixed() +
  theme_bw()

```
```{r}

dds <- DESeq(dds)
res <- results(dds)
res
```

```{r}
summary(res)
```

```{r}
res05 <- results(dds, alpha=0.05)
summary(res05)
```

```{r}
library("AnnotationDbi")
library("org.Hs.eg.db")
```
```{r}
columns(org.Hs.eg.db)
```

```{r}
res$symbol <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), 
                     keytype="ENSEMBL",        
                     column="SYMBOL",          
                     multiVals="first")

head(res)
```

>Q11. Run the mapIds() function two more times to add the Entrez ID and UniProt accession and GENENAME as new columns called res$entrez, res$uniprot and res$genename.

```{r}
res$genename <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     column="GENENAME",
                     keytype="ENSEMBL",
                     multiVals="first")

res$uniprot <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     column="UNIPROT",
                     keytype="ENSEMBL",
                     multiVals="first")

res$entrez <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     column="ENTREZID",
                     keytype="ENSEMBL",
                     multiVals="first")
head(res)

```

```{r}
ord <- order( res$padj )
head(res[ord,])
```

```{r}
write.csv(res[ord,], "deseq_results.csv")

```

```{r}
plot( res$log2FoldChange,  -log(res$padj), 
      xlab="Log2(FoldChange)",
      ylab="-Log(P-value)")
```
```{r}
plot( res$log2FoldChange,  -log(res$padj), 
 ylab="-Log(P-value)", xlab="Log2(FoldChange)")

abline(v=c(-2,2), col="darkgray", lty=2)
abline(h=-log(0.05), col="darkgray", lty=2)

```
```{r}

mycols <- rep("gray", nrow(res))
mycols[ abs(res$log2FoldChange) > 2 ]  <- "red" 

inds <- (res$padj < 0.01) & (abs(res$log2FoldChange) > 2 )
mycols[ inds ] <- "blue"

plot( res$log2FoldChange,  -log(res$padj), 
 col=mycols, ylab="-Log(P-value)", xlab="Log2(FoldChange)" )

abline(v=c(-2,2), col="gray", lty=2)
abline(h=-log(0.1), col="gray", lty=2)
```

```{r}
library(EnhancedVolcano)

x <- as.data.frame(res)

EnhancedVolcano(x,
    lab = x$symbol,
    x = 'log2FoldChange',
    y = 'pvalue')






```

